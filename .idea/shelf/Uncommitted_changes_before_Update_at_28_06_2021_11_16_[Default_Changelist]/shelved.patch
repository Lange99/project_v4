Index: src/main/java/Project_v4/NetManager.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.Project_v4;\r\n\r\n\r\nimport main.java.Utility.IO;\r\nimport main.java.Utility.JsonManager;\r\nimport main.java.Utility.JsonReader;\r\nimport main.java.Utility.JsonWriter;\r\n\r\n\r\nimport java.io.File;\r\nimport java.io.FileNotFoundException;\r\nimport java.io.IOException;\r\nimport java.math.BigInteger;\r\nimport java.security.MessageDigest;\r\nimport java.util.ArrayList;\r\n\r\npublic class NetManager {\r\n\r\n    private ArrayList<Net> netList = new ArrayList<>();\r\n    private ArrayList<PetriNet> petriNetList = new ArrayList<>();\r\n    private ArrayList<PriorityPetriNet> priorityPetriNetList = new ArrayList<>();\r\n\r\n    /**\r\n     * this method handles the interface with the user\r\n     *\r\n     * @throws FileNotFoundException\r\n     */\r\n    public void menageOption() throws IOException {\r\n        boolean check = true;\r\n        int choise = 0;\r\n        do {\r\n            IO.print(IO.MENU);\r\n            choise = IO.readNumber(IO.DIGIT_YOUR_CHOISE);\r\n            while (choise < 0 || choise > 4) {\r\n                IO.print(IO.DIGIT_VALID_CHOISE);\r\n                choise = IO.readNumber(IO.DIGIT_YOUR_CHOISE);\r\n            }\r\n            //this switch handles the different situation and it recalls the method for satisfy the user\r\n\r\n            switch (choise) {\r\n                case 0: //the program stops running\r\n                    check = false;\r\n                    break;\r\n\r\n                case 1: //this chose allows to the user to create a new net\r\n                    addNet();\r\n                    check = IO.yesOrNo(IO.WANT_TO_DO_ANOTHER_OPERATION);\r\n                    break;\r\n\r\n                case 2: //this chose allows to the user to load a net\r\n                    int typeNet = IO.readInteger(IO.TYPE_OF_NET, 1, 2);\r\n                    if (typeNet == 1) {\r\n                        Net newNet = JsonManager.loadNet();\r\n                        if (newNet != null) {\r\n                            netList.add(newNet);\r\n                            IO.showNet(newNet);\r\n                        }\r\n                    } else {\r\n                        PetriNet newNet = JsonManager.loadPetriNet();\r\n                        if (newNet != null) {\r\n                            petriNetList.add(newNet);\r\n                            IO.showPetriNet(newNet);\r\n                        }\r\n                    }\r\n                    check = IO.yesOrNo(IO.WANT_TO_DO_ANOTHER_OPERATION);\r\n                    break;\r\n\r\n                case 3: //this chose allows to the user to create a new Petri's net\r\n                    if (netList.size() == 0) {\r\n                        IO.print(IO.NO_NORMAL_NET);\r\n                    } else {\r\n                        addPetriNet();\r\n                    }\r\n                    break;\r\n\r\n                case 4: //this chose allows to the user to create a new Petri's net with Priority\r\n                    PetriNet newNet = JsonManager.loadPetriNet();\r\n                    createPriorityPetriNet(newNet);\r\n\r\n\r\n            }\r\n        } while (check);\r\n\r\n    }\r\n\r\n\r\n    /**\r\n     * Method that compares a petri net with those saved in the PetriNetList\r\n     *\r\n     * @param net is the net to check;\r\n     * @return false if two net are equal\r\n     */\r\n    public boolean checkPetriNet(PetriNet net)  {\r\n        try {\r\n            if(existsAlreadyPetriNet(net)){\r\n                return false;\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        for (PetriNet n : petriNetList) {\r\n            if (net.equals(n)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    public boolean checkPriorityPetriNet(PriorityPetriNet net) {\r\n        try {\r\n            if (existsAlreadyPriorityPetriNet(net)) {\r\n                return false;\r\n            }\r\n        } catch (FileNotFoundException e) {\r\n            e.printStackTrace();\r\n        }\r\n        for (PriorityPetriNet n : priorityPetriNetList) {\r\n            if (net.equals(n)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * this method allows to the user to create a new Petri's net\r\n     */\r\n    public void addPetriNet() {\r\n        PetriNet newPetriNet = new PetriNet(loadOneNet());\r\n        IO.showPetriNet(newPetriNet);\r\n        newPetriNet.setName(IO.ReadString(IO.NAME_OF_NET));\r\n        while (!checkPetriNetName(newPetriNet.getName())){\r\n            IO.print(IO.SET_NEW_NAME);\r\n            newPetriNet.setName(IO.readNotEmptyString(IO.NAME_OF_NET));\r\n        }\r\n        //we add the token to the place\r\n        while (IO.yesOrNo(IO.DO_YOU_WANT_TO_ADD_TOKEN_TO_PLACE)) {\r\n            addTokenToPetriNet(newPetriNet);\r\n        }\r\n\r\n        //we add the weight to the transition\r\n        addWeightToPetriNet(newPetriNet);\r\n\r\n\r\n        if (checkPetriNet(newPetriNet)) {\r\n            if (IO.yesOrNo(IO.DO_YOU_WANT_TO_SAVE_THAT_PETRI_S_NET)) {\r\n                JsonWriter.writeJsonPetri(newPetriNet);\r\n            }\r\n            petriNetList.add(newPetriNet);\r\n        }\r\n    }\r\n    public void addPriorityPetriNet() {\r\n        PriorityPetriNet newPriorityPetriNet = new PriorityPetriNet(loadOnePetriNet());\r\n        IO.showPriorityPetriNet(newPriorityPetriNet);\r\n        newPriorityPetriNet.setName(IO.ReadString(IO.NAME_OF_NET));\r\n        while (!checkPetriNetName(newPriorityPetriNet.getName())) {\r\n            IO.print(IO.SET_NEW_NAME);\r\n            newPriorityPetriNet.setName(IO.readNotEmptyString(IO.NAME_OF_NET));\r\n        }\r\n        while (IO.yesOrNo(IO.DO_YOU_WANT_TO_ADD_TOKEN_TO_PLACE)) {\r\n            addPrioritysToTheNet(newPriorityPetriNet);\r\n        }\r\n\r\n        if (checkPriorityPetriNet(newPriorityPetriNet)) {\r\n            if (IO.yesOrNo(IO.DO_YOU_WANT_SAVE_PRIORITY_NET)) {\r\n                JsonWriter.writeJsonPriorityPetriNet(newPriorityPetriNet);\r\n            }\r\n            priorityPetriNetList.add(newPriorityPetriNet);\r\n        }\r\n    }\r\n    private void addPrioritysToTheNet(PriorityPetriNet priorityNet) {\r\n        ArrayList<Transition> tempTransition = new ArrayList<>(priorityNet.getSetOfTrans());\r\n\r\n        IO.printTransition(priorityNet.getSetOfTrans());\r\n        int choise = IO.readInteger(IO.WHICH_TRANSITION_ADD_PRIORITY, 1, tempTransition.size());\r\n        int priority = IO.readIntegerWithMin(IO.INSERT_PRIORITY_OF_TRANSITION, 1);\r\n\r\n        String transitionId = tempTransition.get(choise-1).getName();\r\n\r\n        if (priorityNet.addPriority(transitionId, priority)) {\r\n            IO.print(IO.PRIORITY_ADDEN);\r\n        }\r\n        else {\r\n            IO.print(IO.TRANSITION_DOESNT_EXIST);\r\n        }\r\n    }\r\n\r\n    private void addWeightToPetriNet(PetriNet newPetriNet) {\r\n        while (IO.yesOrNo(IO.ADD_WEIGHT)) {\r\n            ArrayList<Transition> transTemp = new ArrayList<>(newPetriNet.getSetOfTrans());\r\n\r\n            // User choose the transition to modify\r\n            IO.printTransition(transTemp);\r\n            int choose = IO.readInteger(IO.TRANSITION_CHOOSE, 0, transTemp.size()) - 1;\r\n\r\n            // show the predecessors and successors of the related transition\r\n            ArrayList<String> placeTemp = new ArrayList<>();\r\n            placeTemp.addAll(transTemp.get(choose).getIdPre());\r\n            placeTemp.addAll(transTemp.get(choose).getIdPost());\r\n\r\n            do {\r\n                IO.printString(placeTemp);\r\n                //I ask which transaction-seat you want to change\r\n                String placeToChange = placeTemp.get(IO.readInteger(IO.WHAT_PLACE_YOU_WANT_CHANGE, 0, placeTemp.size()) - 1);\r\n                int weight = IO.readIntegerWithMin(IO.INSERT_THE_WEIGHT_THAT_YOU_WANT_TO_GIVE_TO_THE_PLACE, 0);\r\n                newPetriNet.addWeight(transTemp.get(choose).getName(), placeToChange, weight);\r\n            } while (IO.yesOrNo(IO.DO_YOU_WANT_TO_ADD_OTHER_WEIGHTS_TO_THIS_TRANSITION));\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n    private void addTokenToPetriNet(PetriNet newPetriNet) {\r\n        ArrayList<Place> tempPlace = new ArrayList<>(newPetriNet.getSetOfPlace());\r\n\r\n        IO.printPlace(newPetriNet.getSetOfPlace());\r\n        int choise = IO.readInteger(IO.WHERE_DO_YOU_WANT_TO_ADD_THE_TOKENS, 0, tempPlace.size());\r\n        int token = IO.readIntegerWithMin(IO.INSERT_THE_NUMBER_OF_TOKENS, 0);\r\n\r\n        String placeId = tempPlace.get(choise - 1).getName();\r\n\r\n        if (newPetriNet.addToken(placeId, token)) {\r\n            IO.print(IO.THE_WEIGHT_HAS_BEEN_ADDED);\r\n        } else {\r\n            IO.print(IO.THE_PLACE_DOESN_T_EXIST);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * this method allows to add a net\r\n     */\r\n    public void addNet() throws FileNotFoundException {\r\n        String placeName;\r\n        String transName;\r\n        int inOrOut;\r\n\r\n        do {\r\n            Net n = new Net(IO.readNotEmptyString(IO.NAME_OF_NET));\r\n            while (!checkNetName(n.getName())){\r\n                IO.print(IO.SET_NEW_NAME);\r\n                n.setName(IO.readNotEmptyString(IO.NAME_OF_NET));\r\n            }\r\n            do {\r\n                // ask to user the place's ID and the transition's ID\r\n                placeName = IO.readNotEmptyString(IO.INSERT_PLACE_S_ID);\r\n                transName = IO.readNotEmptyString(IO.INSERT_TRANSITION_S_ID);\r\n                inOrOut = IO.readInteger(IO.connectionBetweenPlaceandTrans(transName, placeName), 1, 2);\r\n                //this If check if the new node is equal to another one which is already in the net\r\n                //I create a temporary transition and a temporary place because it makes easy to check them\r\n                Transition t = new Transition(transName);\r\n                Place p = new Place(placeName);\r\n                if (!n.addPair(t, p, inOrOut)) {\r\n                    System.out.println(IO.YOU_CAN_T_ADD_THIS_PAIR_BECAUSE_ALREADY_EXISTS);\r\n                }\r\n            } while (IO.yesOrNo(IO.YOU_WANT_ADD_ANOTHER_PAIR));\r\n            //if the new net is correct we show it to the user and ask if he wants to save it\r\n            if (checkNet(n) && n.checkTrans() && n.checkConnect() && checkEqualNet(n)) {\r\n                IO.showNet(n);\r\n                IO.print(IO.THE_NET_IS_CORRECT_WE_ARE_GOING_TO_SAVE_IT);\r\n\r\n                netList.add(n);\r\n\r\n                if (IO.yesOrNo(IO.SAVE_NET)) {\r\n                    JsonWriter.writeJsonNet(n);\r\n                }\r\n            } else {\r\n                //if the net is incorrect we inform the user\r\n                IO.printError(IO.THE_NET_IS_INCORRECT_IT_CAN_T_BE_SAVED);\r\n\r\n            }\r\n        } while (IO.yesOrNo(IO.ANOTHER_NET));\r\n    }\r\n\r\n    /**\r\n     * the method check if there is only a place connect to a transition\r\n     *\r\n     * @param n the net we have to check\r\n     * @return false if there are some problems and if there is one or more pendant connection\r\n     */\r\n    public boolean checkNet(Net n) {\r\n        //if there is a problem the method return false\r\n        return n.checkPendantNode();\r\n    }\r\n\r\n    /**\r\n     * method that prints all the nets in the netlist and returns a choice from the user\r\n     * @return the net choice\r\n     */\r\n    public Net loadOneNet() {\r\n\r\n        for (int i = 0; i < netList.size(); i++) {\r\n            IO.print(i + \") \" + netList.get(i).getName());\r\n\r\n        }\r\n        int choise = IO.readInteger(\"choose the network number \", 0, netList.size());\r\n        return netList.get(choise);\r\n    }\r\n    private PetriNet loadOnePetriNet() {\r\n        for (int i = 0; i < petriNetList.size(); i++) {\r\n            IO.print(i + \") \" + petriNetList.get(i).getName());\r\n\r\n        }\r\n        int choise = IO.readInteger(\"choose the network number \", 0, petriNetList.size());\r\n        return petriNetList.get(choise);\r\n    }\r\n    /**\r\n     * this method check if the net already exists and that can't be saved\r\n     *\r\n     * @param netToCheck the net that should be check\r\n     * @return true if that net already exists and false if it doesn't\r\n     * @throws FileNotFoundException PRECONDITION: NetToCheck!=null\r\n     */\r\n    private boolean checkEqualNet(Net netToCheck) throws FileNotFoundException {\r\n        assert netToCheck != null;\r\n        //initialize the File object directory\r\n        File directory = new File(\"src/main/Json\");\r\n        //initialize the string that contains the list of name file\r\n        String[] pathname = directory.list();\r\n        int dim;\r\n        if (pathname != null)\r\n            dim = pathname.length;\r\n        else {\r\n            return true;\r\n        }\r\n\r\n        ArrayList<Pair> pairsNewNet = netToCheck.getNet();\r\n        int ctrl = 0;\r\n        //consider all files in directory\r\n        for (int i = 0; i < dim; i++) {\r\n            if (ctrl == pairsNewNet.size()) {\r\n                return false;\r\n            }\r\n            ctrl = 0;\r\n            //get pathname of the file\r\n            String path = IO.JSON_FILE + \"/\" + pathname[i];\r\n            //build a net by the file\r\n            Net net = JsonReader.readJson(path);\r\n            //get all pairs of the net\r\n            ArrayList<Pair> pairsOldNet = net.getNet();\r\n\r\n            //if the size is equal chek, else change file\r\n            if (pairsOldNet.size() == pairsNewNet.size()) {\r\n                int j = 0;\r\n                //for every pair in the new net, take every pair of the pre existing net and check\r\n                for (Pair newPair : pairsNewNet) {\r\n                    if (ctrl < j)\r\n                        break;\r\n                    for (Pair oldPair : pairsOldNet) {\r\n                        if (newPair.getPlaceName().equals(oldPair.getPlaceName())) {\r\n                            if (newPair.getPlaceName().equals(oldPair.getPlaceName())) {\r\n                                ctrl++;\r\n                                break;\r\n                            }\r\n                        }\r\n                    }\r\n                    j++;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * Method to check if the petri net insert exist already or is new and it is possible add it\r\n     * @param newPetriNetToCheck\r\n     * @return true if there is already the same net, false if there isn't\r\n     * @throws FileNotFoundException\r\n     */\r\n    public boolean existsAlreadyPetriNet(PetriNet newPetriNetToCheck) throws FileNotFoundException {\r\n        assert newPetriNetToCheck != null;\r\n        // bulld array String of the list of all file in JsonPetri directory\r\n        String[] pathname = JsonManager.getPathname(IO.JSON_PETRI_FILE);\r\n\r\n        String nameNetToCheck = newPetriNetToCheck.getName();\r\n        ArrayList<String> pairsNetToCheck = getStringPairsFromPetriNet(newPetriNetToCheck);\r\n        int sizePairsNetToCheck = pairsNetToCheck.size();\r\n\r\n        for (String pathnameOfFileToCheck: pathname) {\r\n            PetriNet existingNet = JsonReader.readPetriJson(IO.JSON_PETRI_FILE+pathnameOfFileToCheck);\r\n            ArrayList<String> pairsExistingNet = getStringPairsFromPetriNet(existingNet);\r\n            int counter = 0;\r\n            int sizeArrayPairsExistingNet = pairsExistingNet.size();\r\n\r\n            if (sizePairsNetToCheck == sizeArrayPairsExistingNet) {\r\n                for (String toCheck: pairsNetToCheck) {\r\n                    for (String existing: pairsExistingNet) {\r\n                        if (toCheck.equals(existing)) {\r\n                            counter = counter + 1;\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n                if (counter == sizePairsNetToCheck) {\r\n                    return true;\r\n                }\r\n            }\r\n            else {\r\n                continue;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n    /** Method that allows you to check that the name of a network is not the same as the existing networks\r\n     * @param netName is the name of the Net\r\n     * @return true if there are no networks with this name\r\n     */\r\n    public boolean checkNetName(String netName) {\r\n        for (Net n : netList) {\r\n            if (n.getName().equals(netName)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    /**\r\n     * Method that allows you to check that the name of a Petri's network is not the same as the existing Petri's networks\r\n     * @param petriNetName is the name of the Petri's Net\r\n     * @return true if there are no Petri's net with this name\r\n     */\r\n    public boolean checkPetriNetName(String petriNetName) {\r\n        for (PetriNet n : petriNetList) {\r\n            if (n.getName().equals(petriNetName)) {\r\n                return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    private ArrayList<String> getStringPairsFromPetriNet(PetriNet net) {\r\n        int i = 0;\r\n        ArrayList<String> stringPair = new ArrayList<>();\r\n        for (Pair pair: net.getNet()) {\r\n            String placeName = pair.getPlaceName();\r\n            String tokenNumber = String.valueOf(pair.getNumberOfToken());\r\n            String transitionName = pair.getTransName();\r\n            String weightNumber = String.valueOf(pair.getWeight());\r\n            String placeNameOfPrePlace = pair.getIdPreviusPlaceByIndex(i);\r\n            String placeNameOfPostPlace = pair.getIdPostPlaceByIndex(i);\r\n            String stringToElaborate = \"Name: \" + placeName + \"\\n\" +\r\n                    \"Token: \" + tokenNumber + \"\\n\" +\r\n                    \"Transition: \" + transitionName + \"\\n\" +\r\n                    \"Weight: \" + weightNumber + \"\\n\" +\r\n                    \"First place: \" + placeNameOfPrePlace + \"\\n\" +\r\n                    \"Second place: \" + placeNameOfPostPlace + \"\\n\";\r\n            String stringToAdd = getHashcode(stringToElaborate);\r\n            stringPair.add(stringToAdd);\r\n        }\r\n        return stringPair;\r\n    }\r\n\r\n    private String getHashcode(String stringToEncrypt) {\r\n        String sha1 = null;\r\n        try {\r\n            MessageDigest digest = MessageDigest.getInstance(\"SHA-1\");\r\n            digest.reset();\r\n            digest.update(stringToEncrypt.getBytes(\"utf8\"));\r\n            sha1 = String.format(\"%040x\", new BigInteger(1, digest.digest()));\r\n        } catch (Exception e){\r\n            e.printStackTrace();\r\n        }\r\n        return sha1;\r\n    }\r\n\r\n    public ArrayList<PriorityPetriNet> getPrioritynetList(){\r\n        return priorityPetriNetList;\r\n    }\r\n\r\n    public void createPriorityPetriNet(PetriNet pN){\r\n        PriorityPetriNet newNet = new PriorityPetriNet(pN);\r\n        String name = IO.ReadString(IO.WHAT_IS_THE_PRIORITY_PETRI_S_NET_CALLED);\r\n        newNet.setName(name);\r\n        while(IO.yesOrNo(IO.DO_YOU_WANT_ADD_PRIORITIES)){\r\n            assignPriority(newNet);\r\n        }\r\n        priorityPetriNetList.add(newNet);\r\n\r\n    }\r\n\r\n    public void assignPriority(PriorityPetriNet pnp){\r\n        ArrayList<Transition> tempArr = new ArrayList<>(pnp.getSetOfTrans());\r\n        int i=0;\r\n        for(i=0; i< tempArr.size(); i++){\r\n            IO.print(i + \") \" + tempArr.get(i).getName());\r\n        }\r\n        int choise = IO.readInteger(IO.WHICH_TRANSITION_DO_YOU_WANT_TO_PRIORITIZE, 0, tempArr.size()-1);\r\n        int priorityNumber = IO.readNumber(IO.WHAT_PRIORITY_DO_YOU_WANT_ASSIGN);\r\n        pnp.addPriority(tempArr.get(choise).getName(), priorityNumber);\r\n    }\r\n    public boolean existsAlreadyPriorityPetriNet(PriorityPetriNet newPriorityPetriNetToCheck) throws FileNotFoundException {\r\n        assert newPriorityPetriNetToCheck != null;\r\n        // bulld array String of the list of all file in JsonPetri directory\r\n        String[] pathname = JsonManager.getPathname(IO.JSON_PRIORITY_PETRI_FILE);\r\n\r\n        ArrayList<String> pairsNetToCheck = getStringPairsFromPetriNet(newPriorityPetriNetToCheck);\r\n        int sizePairsNetToCheck = pairsNetToCheck.size();\r\n\r\n        for (String pathnameOfFileToCheck : pathname) {\r\n            PetriNet existingNet = JsonReader.readPetriJson(IO.JSON_PRIORITY_PETRI_FILE + pathnameOfFileToCheck);\r\n            ArrayList<String> pairsExistingNet = getStringPairsFromPetriNet(existingNet);\r\n            int counter = 0;\r\n            int sizeArrayPairsExistingNet = pairsExistingNet.size();\r\n\r\n            if (sizePairsNetToCheck == sizeArrayPairsExistingNet) {\r\n                for (String toCheck : pairsNetToCheck) {\r\n                    for (String existing : pairsExistingNet) {\r\n                        if (toCheck.equals(existing)) {\r\n                            counter = counter + 1;\r\n                            continue;\r\n                        }\r\n                    }\r\n                }\r\n                if (counter == sizePairsNetToCheck) {\r\n                    return true;\r\n                }\r\n            } else {\r\n                continue;\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Project_v4/NetManager.java b/src/main/java/Project_v4/NetManager.java
--- a/src/main/java/Project_v4/NetManager.java	(revision f812815ff1416f67cbbd407bc6206b2892b84f43)
+++ b/src/main/java/Project_v4/NetManager.java	(date 1624867275025)
@@ -74,9 +74,12 @@
                     break;
 
                 case 4: //this chose allows to the user to create a new Petri's net with Priority
-                    PetriNet newNet = JsonManager.loadPetriNet();
-                    createPriorityPetriNet(newNet);
-
+                    if(petriNetList.size()==0){
+                        IO.print(IO.NO_PETRI_NET);
+                    }else {
+                        PetriNet newNet = JsonManager.loadPetriNet();
+                        createPriorityPetriNet(newNet);
+                    }
 
             }
         } while (check);
Index: src/main/java/Utility/IO.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package main.java.Utility;\r\n\r\n\r\nimport main.java.Project_v4.*;\r\n\r\nimport java.io.File;\r\nimport java.util.*;\r\n\r\npublic class IO {\r\n    public static final String WHAT_DO_YOU_WANT_DO_0_EXIT_1_START_SIMULATION = \"What do you want do?\\n0)EXIT\\n1)Load the net \\n2) Simulation \";\r\n    public static final String THERE_AREN_T_ANY_NETS_LOADED_YOU_HAVE_TO_LOAD_ONE_NET_BEFORE_THE_SIMULATION = \"There aren't any nets loaded, you have to load one net before the simulation\";\r\n    public static final String DO_YOU_WANT_CLOSE_THE_PROGRAM = \"Do you want close the program?\\n\";\r\n    public static final String STOP = \"If you want to stop the simulatoin press 0\";\r\n    public static final String THIS_TRANSITIONS_WILL_BE_UPDATED = \"This transition will move the token to this place\";\r\n    public static final String DO_YOU_WANT_TO_CONTINUE_THE_SIMULATION = \"Do you want to continue the simulation?\";\r\n\r\n    public static final String CHOOSE_THE_ELEMENT = \"choose the mode:\\n0) Exit \\n1) User mode \\n2) Configurator mode\";\r\n    public static final String MARKING_WITH_TOKEN = \"The first marking is given by:\";\r\n    public static final String WHERE_THERE_ARE = \" where there are \";\r\n    public static final String SET_NEW_NAME = \"A network with this name already exists, please enter a different name\";\r\n    public static final String DO_YOU_WANT_TO_SAVE_THAT_PETRI_S_NET = \"Do you want to save that Petri's Net?\";\r\n    public static final String THERE_AREN_T_ANY_TRANSITION_AVAILABLE = \"There aren't any transition available \";\r\n    public static final String THE_FOLLOWING_TRANSITION_ARE_AVAILABLE = \"The following transition are available\";\r\n    public static final String INSERT_THE_NUMBER_OF_THE_TRANSITION_YOU_WANT_TO_USE = \"Insert the number of the transition you want to use\";\r\n    public static final String HOW_MANY_TOKEN = \"How many tokens do you want this place to have?\\n(if you don't want tokens enter 0)\";\r\n    public static final String DO_YOU_WANT_TO_LOAD_OTHER_NETS = \"Do you want to load other nets?\";\r\n    public static final String DO_YOU_WANT_TO_ADD_TOKEN_TO_PLACE = \"Do you want to add token to place ? \";\r\n    public static final String THERE_AREN_T_ANY_FILES_TO_LOAD = \"There aren't any files to load\";\r\n    public static final String WHERE_DO_YOU_WANT_TO_PUT_THE_TOKEN = \"Where do you want to put the token?\";\r\n    public static final String THIS_TRANSITION_CAN_MOVE_THE_TOKENS_IN_DIFFERENT_PLACES = \"This transition can move the tokens in different places\";\r\n    public static final String DO_YOU_WANT_TO_MAKE_AN_OTHER_SIMULATION = \"Do you want to make an other simulation?\";\r\n    public static final String YOU_HAVE_TO_LOAD_A_NET_WHICH_ONE_DO_YOU_WANT = \"\\nYou have to load a net, which one do you want?\";\r\n    public static final String INSERT_THE_NUMBER_OF_THE_NET_THAT_YOU_WANT_TO_USE = \"Insert the number of the net that you want to use\";\r\n    public static final String INSERT_PLACE_S_ID = \"Insert place's Name \";\r\n    public static final String INSERT_TRANSITION_S_ID = \"Insert transition's Name \";\r\n    public static final String YOU_CAN_T_ADD_THIS_PAIR_BECAUSE_ALREADY_EXISTS = \"You can't Add this pair because it already exists\";\r\n    public static final String YOU_WANT_ADD_ANOTHER_PAIR = \"You want add another Pair?\";\r\n    public static final String WRITING_FILE_ERROR = \"writing file error.\";\r\n    public static final String TYPE_OF_NET = \"Do you want load:\\n1) simple net\\n2) Petri Net\\n\" ;\r\n    public static final String FILE_IS_LOADED = \"File is loaded\";\r\n    public static final String VISUALIZE_THE_LIST = \"Visualize the list\";\r\n    public static final String ADD_WEIGHT = \"Do you want to add weight to the transition? If you say no we insert the default value\";\r\n    public static final String TRANSITION_CHOOSE = \"These are the transition in the Net, do you have to choose which one modify: (insert the number)\" ;\r\n    private static final String path = new File(\"src/main/java/JsonFile\").getAbsolutePath();\r\n    private static final String petriPath = new File(\"src/main/java/JsonPetri\").getAbsolutePath();\r\n    public static final String ANOTHER_NET = \"You want add another Net?\";\r\n    public static final String NAME_OF_NET = \"Add the name of Net:\";\r\n    public static final String MENU = \"What do you want do?\\n0)EXIT\\n1)Add new Net\\n2)Load net\\n3)Create a new Petri's Net\\n4)Create a new Petri's Net with Priority\";\r\n    public static final String WANT_TO_DO_ANOTHER_OPERATION = \"you want to do another operation \";\r\n    public static final String SAVE_NET = \"Do you want to save the net that you have already made? \";\r\n    public static final String DIGIT_YOUR_CHOISE = \"Digit your choise \";\r\n    public static final String DIGIT_VALID_CHOISE = \"Digit valid choise!\";\r\n    public static final String THE_NET_IS_INCORRECT_IT_CAN_T_BE_SAVED = \"The net is incorrect, it can't be saved\";\r\n    public static final String THE_NET_IS_CORRECT_WE_ARE_GOING_TO_SAVE_IT = \"The net is correct, we are going to save it\";\r\n    public static final String NO_NORMAL_NET = \"There aren't any nets! You have to insert or load a net before adding a Petri Net\";\r\n    public static final String JSON_FILE = \"src/main/java/JsonFile\";\r\n    public static final String JSON_PETRI_FILE = \"src/main/java/JsonPetri/\";\r\n    public static final String JSON_PRIORITY_PETRI_FILE = \"src/main/java/JsonPriority/\";\r\n    // public static final String HOW_MANY_TOKEN = \"How many tokens do you want this place to have?\\n(if you don't want tokens enter 0)\";\r\n    public final static String WHAT_PLACE_YOU_WANT_CHANGE = \"What place you want change?\";\r\n    private final static String ERROR_FORMAT = \"Warning: the entered data are in the wrong format.\";\r\n    private final static String MINIMUM_ERROR = \"Warning: the value must to be grater or equal to \";\r\n    private final static String STRING_EMPTY_ERROR = \"Warning: the string entered is empty\";\r\n    private final static String MAXIMUM_ERROR = \"Warning: the value must to be lower or equal to \";\r\n    private final static String MESSAGES_ALLOWED = \"Warning, the value allowed are: \";\r\n    private final static char YES_ANSWER = 'Y';\r\n    private final static char NO_ANSWER = 'N';\r\n    public static final String INSERT_THE_WEIGHT_THAT_YOU_WANT_TO_GIVE_TO_THE_PLACE = \"Insert the weight that you want to give to the place\";\r\n    public static final String DO_YOU_WANT_TO_ADD_OTHER_WEIGHTS_TO_THIS_TRANSITION = \"Do you want to add other weights to this transition?\";\r\n    public static final String WHERE_DO_YOU_WANT_TO_ADD_THE_TOKENS = \"where do you want to add the tokens?\";\r\n    public static final String INSERT_THE_NUMBER_OF_TOKENS = \"Insert the number of tokens: \";\r\n    public static final String THE_WEIGHT_HAS_BEEN_ADDED = \"The weight has been added\";\r\n    public static final String THE_PLACE_DOESN_T_EXIST = \"The place doesn't exist\";\r\n    public static final String INSERT_PRIORITY_OF_TRANSITION = \"Insert the priority value of the transition: \";\r\n    public static final String WHICH_TRANSITION_ADD_PRIORITY = \"Chose the transition to add the priority: \";\r\n    public static final String PRIORITY_ADDEN = \"The priority has been added.\";\r\n    public static final String TRANSITION_DOESNT_EXIST = \"The transition doesn't exist\";\r\n    public static final String DO_YOU_WANT_SAVE_PRIORITY_NET = \"Do you want to save the net with priority?\";\r\n    public static final String WHAT_IS_THE_PRIORITY_PETRI_S_NET_CALLED = \"What is the Priority Petri's net called?\";\r\n    public static final String DO_YOU_WANT_ADD_PRIORITIES = \"Do you want add priorities?\";\r\n    public static final String WHICH_TRANSITION_DO_YOU_WANT_TO_PRIORITIZE = \"Which transition do you want to prioritize?\";\r\n    public static final String WHAT_PRIORITY_DO_YOU_WANT_ASSIGN = \"What priority do you want to assign?\\nThe higher the number, the higher the priority of the transition)\";\r\n    private static Scanner reader = scannerBuild();\r\n\r\n    /**\r\n     * method to print a string\r\n     * @param s is a string to print\r\n     */\r\n    public static void print(String s){\r\n        System.out.println(s);\r\n    }\r\n\r\n    /**\r\n     * method to print an error\r\n     * @param s is the error to print\r\n     */\r\n    public static void printError(String s){\r\n        System.err.println(s);\r\n    }\r\n\r\n    /**\r\n     * method to read a not empity string\r\n     * @param message to print\r\n     */\r\n    public static String readNotEmptyString(String message) {\r\n        boolean finish = false;\r\n        String read = null;\r\n        do {\r\n            read = ReadString(message);\r\n            read = read.trim();\r\n            if (read.length() > 0)\r\n                finish = true;\r\n            else\r\n                print(STRING_EMPTY_ERROR);\r\n        } while (!finish);\r\n\r\n        return read;\r\n    }\r\n\r\n    /**\r\n     * method to check if the user want do something\r\n     * @param message is the operation on which confirmation is requested\r\n     */\r\n    public static boolean yesOrNo(String message) {\r\n        String myMessage = message + \"(\" + YES_ANSWER + \"/\" + NO_ANSWER + \")\";\r\n        char readValue = readUpperChar(myMessage, String.valueOf(YES_ANSWER) + String.valueOf(NO_ANSWER));\r\n\r\n        if (readValue == YES_ANSWER)\r\n            return true;\r\n        else\r\n            return false;\r\n    }\r\n\r\n    /**\r\n     * This method allows me (concisely) to create the string I use to ask the user if the place he wants to add is a successor or predecessor of a transition\r\n     * @param transName\r\n     * @param placeName\r\n     * @return the final string\r\n     */\r\n    public static String connectionBetweenPlaceandTrans(String transName, String placeName){\r\n        String question = String.format(\"Which type of connection there is between the place %s and the transition %s? \", placeName, transName);\r\n        String chose1 = String.format(\"\\n1) %s is an INPUT of %s \", placeName, transName);\r\n        String chose2 = String.format(\"\\n2) %s is an OUTPUT of %s \", placeName, transName);\r\n        String finalString = (question.concat(chose1)).concat(chose2);\r\n        return finalString;\r\n    };\r\n\r\n\r\n    /**\r\n     * method to read a Int with a minimum an maximus\r\n     * @param message to print\r\n     */\r\n    public static int readInteger(String message, int min, int max) {\r\n        boolean finish = false;\r\n        int readValue = 0;\r\n        do {\r\n            readValue = readNumber(message);\r\n            if (readValue >= min && readValue <= max)\r\n                finish = true;\r\n            else if (readValue < min)\r\n                print(MINIMUM_ERROR + min);\r\n            else\r\n                print(MAXIMUM_ERROR + max);\r\n        } while (!finish);\r\n\r\n        return readValue;\r\n    }\r\n\r\n    /**\r\n     * method to read a Int with a minimum\r\n     * @param message to print\r\n     */\r\n    public static int readIntegerWithMin(String message, int min) {\r\n        boolean finish = false;\r\n        int readValue = 0;\r\n        do {\r\n            readValue = readNumber(message);\r\n            if (readValue >= min)\r\n                finish = true;\r\n            else\r\n                print(MINIMUM_ERROR+min);\r\n        } while (!finish);\r\n\r\n        return readValue;\r\n    }\r\n\r\n\r\n    public static int readNumber(String message) {\r\n        boolean finish = false;\r\n        int readValue = 0;\r\n        do {\r\n            print(message);\r\n            try {\r\n                readValue = reader.nextInt();\r\n                finish = true;\r\n            } catch (InputMismatchException e) {\r\n                print(ERROR_FORMAT);\r\n                String toDelete = reader.next();\r\n            }\r\n        } while (!finish);\r\n        return readValue;\r\n    }\r\n\r\n    /**\r\n     * Method to read char among those authorized\r\n     * @param message to print\r\n     * @param allowed is string allowed\r\n     */\r\n    public static char readUpperChar(String message, String allowed) {\r\n        boolean finish = false;\r\n        char readValue = '\\0';\r\n        do {\r\n            readValue = readChar(message);\r\n            readValue = Character.toUpperCase(readValue);\r\n            if (allowed.indexOf(readValue) != -1)\r\n                finish = true;\r\n            else\r\n                print(MESSAGES_ALLOWED+allowed);\r\n        } while (!finish);\r\n        return readValue;\r\n    }\r\n\r\n    /**\r\n     * method to read a char\r\n     * @param message to print\r\n     */\r\n    public static char readChar(String message) {\r\n        boolean finish = false;\r\n        char readValue = '\\0';\r\n        do {\r\n            print(message);\r\n            String read = reader.next();\r\n            if (read.length() > 0) {\r\n                readValue = read.charAt(0);\r\n                finish = true;\r\n            } else {\r\n                print(STRING_EMPTY_ERROR);\r\n            }\r\n        } while (!finish);\r\n        return readValue;\r\n    }\r\n\r\n    private static Scanner scannerBuild() {\r\n        Scanner created = new Scanner(System.in);\r\n        created.useDelimiter(System.lineSeparator() + \"|\\n\");\r\n        return created;\r\n    }\r\n\r\n    /**\r\n     * method to read a string\r\n     * @param message to print\r\n     */\r\n    public static String ReadString(String message) {\r\n        print(message);\r\n        return reader.next();\r\n    }\r\n\r\n    /**\r\n     * method for print a list of Place\r\n     * @param list to print\r\n     */\r\n    public static void printPlace(Iterable<Place> list){\r\n        int i=1;\r\n        for(Place p:list){\r\n            IO.print(i+\") \"+ p.getName());\r\n            i++;\r\n        }\r\n\r\n    }\r\n\r\n    /**\r\n     * method to print a list of Transition\r\n     * @param list to print\r\n     */\r\n    public static void printTransition(Iterable<Transition> list){\r\n        int i=1;\r\n\r\n        for(Transition t:list){\r\n            IO.print(i+\") \"+ t.getName());\r\n            i++;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * method to print a list of String\r\n     * @param list to print\r\n     */\r\n    public static void printString(List<String> list) {\r\n        for(int i=0; i<list.size();i++){\r\n            IO.print((i+1)+\") \"+list.get(i));\r\n        }\r\n    }\r\n\r\n    /**\r\n     * method to view the Petri's net\r\n     *\r\n     * @param net\r\n     */\r\n    public static void showPetriNet(Net net) {\r\n        //get name and if of the net\r\n        String nameNet = net.getName();\r\n        //initialize the places and transitions arraylist\r\n        ArrayList<String> places = new ArrayList<String>();\r\n        ArrayList<String> transitions = new ArrayList<String>();\r\n        ArrayList<String> tokens = new ArrayList<>();\r\n        ArrayList<String> weights = new ArrayList<>();\r\n        ArrayList<Integer> directions = new ArrayList<>();\r\n\r\n        //for every pair in the net get the name of place and name of transition\r\n        for (Pair p : net.getNet()) {\r\n            String place = p.getPlace().getName();\r\n            String trans = p.getTrans().getName();\r\n            String tokenPlace = Integer.toString(p.getPlace().getNumberOfToken());\r\n            int direction = p.getTrans().getInputOutput(p.getPlace().getName());\r\n            String weightPair = Integer.toString(p.getWeight());\r\n            //add place to arraylist of places\r\n            places.add(place);\r\n            //add transition to arraylist of transitions\r\n            transitions.add(trans);\r\n            directions.add(direction);\r\n            tokens.add(tokenPlace);\r\n            weights.add(weightPair);\r\n        }\r\n        ArrayList<Integer> order = new ArrayList<>();\r\n        //initialize hashmap that contains the index of place that have the same transition in common\r\n        HashMap<Integer, Integer> index = new HashMap<Integer, Integer>();\r\n        //for every transition in the arraylist check if there are other transition equal\r\n        for (int i = 0; i < transitions.size(); i++) {\r\n            for (int j = 0; j < transitions.size(); j++) {\r\n                //if index i and j are different, check\r\n                if (i != j) {\r\n                    //if the transition in i position is equal to the transition in j position, put the index i and j put the index i and j in the hashmap of index\r\n                    if (transitions.get(i).equals(transitions.get(j))) {\r\n                        int dir = directions.get(i);\r\n                        if (dir == 1) {\r\n                            if (!JsonManager.existAlready(index, i, j)) {\r\n                                index.put(i, j);\r\n                                order.add(0);\r\n                            }\r\n                        } else {\r\n                            if (!JsonManager.existAlready(index, i, j)) {\r\n                                index.put(i, j);\r\n                                order.add(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //initialize new hashmap of index without the copies of the same reference\r\n        //HashMap<Integer, Integer> indexUpdate = checkDuplicate(index);\r\n        //initialize new Arraylist of couples\r\n        ArrayList<String> couples = new ArrayList<String>();\r\n        //for every element in indexUpdate initialize a String that contains the two place and the transition in common\r\n        int i = 0;\r\n        String couple = \"\";\r\n        for (Map.Entry<Integer, Integer> entry : index.entrySet()) {\r\n            if (order.get(i) == 0) {\r\n                couple = places.get(entry.getKey()) + \" <\" + tokens.get(i) + \"> ----------<\" + weights.get(i) + \">----------▶ \" + transitions.get(entry.getValue());\r\n            } else {\r\n                couple = places.get(entry.getKey()) + \" <\" + tokens.get(i) + \"> ◀︎----------<\" + weights.get(i) + \">---------- \" + transitions.get(entry.getValue());\r\n            }\r\n            //add the string to the arraylist\r\n            couples.add(couple);\r\n            i++;\r\n        }\r\n\r\n        //print the name and id and print all the pairs with their transition\r\n        IO.print(\"\\nName net: \" + nameNet );\r\n        IO.print(\"List pairs:\");\r\n        for (String s : couples) {\r\n            IO.print(\"\\t\" + s);\r\n        }\r\n        IO.print(\"\");\r\n\r\n    }\r\n    public static void showPriorityPetriNet(PriorityPetriNet net) {\r\n        //get name and if of the net\r\n        String nameNet = net.getName();\r\n        //initialize the places and transitions arraylist\r\n        ArrayList<String> places = new ArrayList<String>();\r\n        ArrayList<String> transitions = new ArrayList<String>();\r\n        ArrayList<String> tokens = new ArrayList<>();\r\n        ArrayList<String> weights = new ArrayList<>();\r\n        ArrayList<Integer> directions = new ArrayList<>();\r\n\r\n        //for every pair in the net get the name of place and name of transition\r\n        for (Pair p : net.getNet()) {\r\n            String place = p.getPlace().getName();\r\n            String trans = p.getTrans().getName();\r\n            String tokenPlace = Integer.toString(p.getPlace().getNumberOfToken());\r\n            int direction = p.getTrans().getInputOutput(p.getPlace().getName());\r\n            String weightPair = Integer.toString(p.getWeight());\r\n            //add place to arraylist of places\r\n            places.add(place);\r\n            //add transition to arraylist of transitions\r\n            transitions.add(trans);\r\n            directions.add(direction);\r\n            tokens.add(tokenPlace);\r\n            weights.add(weightPair);\r\n        }\r\n        ArrayList<Integer> order = new ArrayList<>();\r\n        //initialize hashmap that contains the index of place that have the same transition in common\r\n        HashMap<Integer, Integer> index = new HashMap<Integer, Integer>();\r\n        //for every transition in the arraylist check if there are other transition equal\r\n        for (int i = 0; i < transitions.size(); i++) {\r\n            for (int j = 0; j < transitions.size(); j++) {\r\n                //if index i and j are different, check\r\n                if (i != j) {\r\n                    //if the transition in i position is equal to the transition in j position, put the index i and j put the index i and j in the hashmap of index\r\n                    if (transitions.get(i).equals(transitions.get(j))) {\r\n                        int dir = directions.get(i);\r\n                        if (dir == 1) {\r\n                            if (!JsonManager.existAlready(index, i, j)) {\r\n                                index.put(i, j);\r\n                                order.add(0);\r\n                            }\r\n                        } else {\r\n                            if (!JsonManager.existAlready(index, i, j)) {\r\n                                index.put(i, j);\r\n                                order.add(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //initialize new hashmap of index without the copies of the same reference\r\n        //HashMap<Integer, Integer> indexUpdate = checkDuplicate(index);\r\n        //initialize new Arraylist of couples\r\n        ArrayList<String> couples = new ArrayList<String>();\r\n        //for every element in indexUpdate initialize a String that contains the two place and the transition in common\r\n        int i = 0;\r\n        String couple = \"\";\r\n        for (Map.Entry<Integer, Integer> entry : index.entrySet()) {\r\n            if (order.get(i) == 0) {\r\n                couple = places.get(entry.getKey()) + \" <\" + tokens.get(i) + \"> ----------<\" + weights.get(i) + \">----------▶ \" + transitions.get(entry.getValue()) + \"\\tPriority: \";\r\n            } else {\r\n                couple = places.get(entry.getKey()) + \" <\" + tokens.get(i) + \"> ◀︎----------<\" + weights.get(i) + \">---------- \" + transitions.get(entry.getValue());\r\n            }\r\n            //add the string to the arraylist\r\n            couples.add(couple);\r\n            i++;\r\n        }\r\n\r\n        //print the name and id and print all the pairs with their transition\r\n        IO.print(\"\\nName net: \" + nameNet );\r\n        IO.print(\"List pairs:\");\r\n        for (String s : couples) {\r\n            IO.print(\"\\t\" + s);\r\n        }\r\n        IO.print(\"\");\r\n    }\r\n    /**\r\n     * method to view the net\r\n     *\r\n     * @param net\r\n     */\r\n    public static void showNet(Net net) {\r\n        //get name and if of the net\r\n        String nameNet = net.getName();\r\n        //initialize the places and transitions arraylist\r\n        ArrayList<String> places = new ArrayList<String>();\r\n        ArrayList<String> transitions = new ArrayList<String>();\r\n        ArrayList<Integer> directions = new ArrayList<>();\r\n\r\n        //for every pair in the net get the name of place and name of transition\r\n        for (Pair p : net.getNet()) {\r\n            String place = p.getPlace().getName();\r\n            String trans = p.getTrans().getName();\r\n            int direction = p.getTrans().getInputOutput(p.getPlace().getName());\r\n            //add place to arraylist of places\r\n            places.add(place);\r\n            //add transition to arraylist of transitions\r\n            transitions.add(trans);\r\n            directions.add(direction);\r\n        }\r\n        ArrayList<Integer> order = new ArrayList<>();\r\n        //initialize hashmap that contains the index of place that have the same transition in common\r\n        HashMap<Integer, Integer> index = new HashMap<Integer, Integer>();\r\n        //for every transition in the arraylist check if there are other transition equal\r\n        for (int i = 0; i < transitions.size(); i++) {\r\n            for (int j = 0; j < transitions.size(); j++) {\r\n                //if index i and j are different, check\r\n                if (i != j) {\r\n                    //if the transition in i position is equal to the transition in j position, put the index i and j put the index i and j in the hashmap of index\r\n                    if (transitions.get(i).equals(transitions.get(j))) {\r\n                        int dir = directions.get(i);\r\n                        if (dir == 1) {\r\n                            if (!JsonManager.existAlready(index, i, j)) {\r\n                                index.put(i, j);\r\n                                order.add(0);\r\n                            }\r\n                        } else {\r\n                            if (!JsonManager.existAlready(index, i, j)) {\r\n                                index.put(i, j);\r\n                                order.add(1);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n        //initialize new hashmap of index without the copies of the same reference\r\n        //HashMap<Integer, Integer> indexUpdate = checkDuplicate(index);\r\n        //initialize new Arraylist of couples\r\n        ArrayList<String> couples = new ArrayList<String>();\r\n        //for every element in indexUpdate initialize a String that contains the two place and the transition in common\r\n        int i = 0;\r\n        String couple = \"\";\r\n        for (Map.Entry<Integer, Integer> entry : index.entrySet()) {\r\n            if (order.get(i) == 0) {\r\n                couple = places.get(entry.getKey()) + \"----->\" + transitions.get(entry.getValue());\r\n            } else {\r\n                couple = places.get(entry.getKey()) + \"<-----\" + transitions.get(entry.getValue());\r\n            }\r\n            //add the string to the arraylist\r\n            couples.add(couple);\r\n            i++;\r\n        }\r\n\r\n        //print the name and id and print all the pairs with their transition\r\n        IO.print(\"\\nName net: \" + nameNet );\r\n        IO.print(\"List pairs:\");\r\n        for (String s : couples) {\r\n            IO.print(\"\\t\" + s);\r\n        }\r\n        System.out.println();\r\n    }\r\n\r\n    public static void printElementWithToken(ArrayList<Pair> initialMark) {\r\n        print(MARKING_WITH_TOKEN);\r\n        printPair(initialMark);\r\n    }\r\n    public static void printPair(Iterable<Pair> pairs) {\r\n        for (Pair p: pairs){\r\n            IO.print(p.getPlace().getName() + WHERE_THERE_ARE + p.getPlace().getNumberOfToken());\r\n\r\n        }\r\n\r\n    }\r\n\r\n    public static void printPetriNets(Iterable<PetriNet> nets) {\r\n        int i=1;\r\n        for (Net n: nets){\r\n            IO.print(i+\") \" + n.getName());\r\n        i++;\r\n        }\r\n\r\n    }\r\n    public static void printPriorityPetriNets(ArrayList<PriorityPetriNet> nets) {\r\n        int i=0;\r\n        for (Net n: nets){\r\n            IO.print(i+\") \" + n.getName());\r\n            i++;\r\n        }\r\n\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Utility/IO.java b/src/main/java/Utility/IO.java
--- a/src/main/java/Utility/IO.java	(revision f812815ff1416f67cbbd407bc6206b2892b84f43)
+++ b/src/main/java/Utility/IO.java	(date 1624867074408)
@@ -53,6 +53,8 @@
     public static final String THE_NET_IS_INCORRECT_IT_CAN_T_BE_SAVED = "The net is incorrect, it can't be saved";
     public static final String THE_NET_IS_CORRECT_WE_ARE_GOING_TO_SAVE_IT = "The net is correct, we are going to save it";
     public static final String NO_NORMAL_NET = "There aren't any nets! You have to insert or load a net before adding a Petri Net";
+    public static final String NO_PETRI_NET = "There aren't any nets! You have to insert or load a net before adding a Petri Net";
+
     public static final String JSON_FILE = "src/main/java/JsonFile";
     public static final String JSON_PETRI_FILE = "src/main/java/JsonPetri/";
     public static final String JSON_PRIORITY_PETRI_FILE = "src/main/java/JsonPriority/";
